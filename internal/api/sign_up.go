// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SignUp sign up
//
// swagger:model SignUp
type SignUp struct {

	// email
	// Required: true
	Email *string `json:"email"`

	// first name
	// Required: true
	FirstName *string `json:"firstName"`

	// last name
	// Required: true
	LastName *string `json:"lastName"`

	// password
	// Required: true
	// Max Length: 30
	// Min Length: 6
	Password *string `json:"password"`

	// password confirm
	// Required: true
	// Max Length: 30
	// Min Length: 6
	PasswordConfirm *string `json:"passwordConfirm"`

	// username
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this sign up
func (m *SignUp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordConfirm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SignUp) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *SignUp) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("firstName", "body", m.FirstName); err != nil {
		return err
	}

	return nil
}

func (m *SignUp) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("lastName", "body", m.LastName); err != nil {
		return err
	}

	return nil
}

func (m *SignUp) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	if err := validate.MinLength("password", "body", *m.Password, 6); err != nil {
		return err
	}

	if err := validate.MaxLength("password", "body", *m.Password, 30); err != nil {
		return err
	}

	return nil
}

func (m *SignUp) validatePasswordConfirm(formats strfmt.Registry) error {

	if err := validate.Required("passwordConfirm", "body", m.PasswordConfirm); err != nil {
		return err
	}

	if err := validate.MinLength("passwordConfirm", "body", *m.PasswordConfirm, 6); err != nil {
		return err
	}

	if err := validate.MaxLength("passwordConfirm", "body", *m.PasswordConfirm, 30); err != nil {
		return err
	}

	return nil
}

func (m *SignUp) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sign up based on context it is used
func (m *SignUp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SignUp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SignUp) UnmarshalBinary(b []byte) error {
	var res SignUp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
